# To test with http://editor.swagger.io/
openapi: 3.0.0
info:
  title: TrikTrak API
  description: API Draft for TrikTrak
  version: 0.0.1
paths:
  /auth:
    post:
      summary: Authentication with credentials
      tags:
      - Auth
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                indicative:
                  type: string
                password:
                  type: string
              required:
              - phone
              - indicative
              - password
      responses:
        '200':    # status code
          description: User logged-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/MissingParam'
  /auth/facebook:
    post:
      summary: Authentication with Facebook
      tags:
      - Auth
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                facebook_token:
                  type: string
                facebook_id:
                  type: string
              required:
              - facebook_token
              - facebook_id
      responses:
        '200':    # status code
          description: User logged-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/MissingParam'
  /auth/accountkit:
    post:
      summary: Request an authentication code
      tags:
      - Auth
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequest'
      responses:
        '200':    # status code
          description: Code sent
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/MissingParam'
  /auth/accountkit/code:
    post:
      summary: Authenticate with phone and authentication code
      tags:
      - Auth
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                phoneIndicative:
                  type: integer
                code:
                  type: integer
              required:
              - phone
              - phoneIndicative
              - code
      responses:
        '200':    # status code
          description: User logged-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/MissingParam'
  /logout:
    post:
      summary: Log out.
      tags:
      - Auth
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Invalidate used access token
  /session:
    get:
      summary: Get session status
      tags:
      - Global
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Current status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionStatus"
  /updates:
    get:
      summary: Get all updates since the given date
      security:
      - bearerAuth: []
      tags:
      - Global
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: query
        name: last_update_date
        required: true
        schema:
          type: string
        description: Last update date
        example: "2019-01-01T08:00:00.000Z"
      responses:
        '200':    # status code
          description: Updates
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Favorite'
                  expired:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expired'
                  invites:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invite'
                  announcements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Announcement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /ping:
    post:
      summary: Update user's location. (Must be spoof proof)
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat:
                  type: string
                long:
                  type: string
              required:
              - long
              - lat
            example:
              long: 2.349014
              lat: 48.864716
      responses:
        '200':    # status code
          description: Location updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
        '422':
          $ref: '#/components/responses/MissingParam'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /users/{id}:
    get:
      summary: Get user's profile data when user are connected or favorited
      tags:
      - Users
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user
      responses:
        '200':    # status code
          description: Return user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
        '422':
          $ref: '#/components/responses/MissingParam'
  /profile:
    get:
      summary: Get my profile
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Return my profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Update my profile
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  properties:
                    age_filter_min:
                      type: number
                      description: Minimum age for user's suggestions
                    age_filter_max:
                      type: number
                      description: Maximum age for user's suggestions
                    distance_filter:
                      type: number
                      description: Maximum distance for user's suggestions
                    gender_filter:
                      type: number
                      description: Gender filter for user's suggestions
              required:
              - fields
      responses:
        '200':    # status code
          description: Updated profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete my profile
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: query
        name: cause
        required: true
        schema:
          type: integer
        description: Deletion cause
      - in: query
        name: text
        schema:
          type: string
        description: Extra info filled by the user
      responses:
        '200':    # status code
          description: User deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/nomenclature:
    get:
      summary: Get profile nomenclature (list of available fields)
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Return all fields
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/visibility:
    delete:
      summary: Deactivate my profile
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: query
        name: cause
        required: true
        schema:
          type: integer
        description: Deactivation cause
      - in: query
        name: text
        schema:
          type: string
        description: Extra info filled by the user
      responses:
        '200':    # status code
          description: Account deactivated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Re-activate my profile
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Profile re-activated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/validation:
    post:
      summary: Upload a picture for the validation
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Review in progress
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/upload:
    post:
      summary: Upload a new picture
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Return the new picture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete a picture
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Picture deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/pictures:
    put:
      summary: Set and update user pictures
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pictures:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
      responses:
        '200':    # status code
          description: Return user pictures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/details:
    put:
      summary: Update user
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    firstname:
                      type: string
                - type: object
                  properties:
                    lastname:
                      type: string
                - type: object
                  properties:
                    height:
                      type: integer
                - type: object
                  properties:
                    email:
                      type: string
                - type: object
                  properties:
                    date_of_birth:
                      type: integer
                - type: object
                  properties:
                    bio:
                      type: string
                - type: object
                  properties:
                    country_code:
                      type: string
                - type: object
                  properties:
                    physical_activity:
                      $ref: '#/components/schemas/PhysicalActivityType'
                - type: object
                  properties:
                    astrological_sign:
                      $ref: '#/components/schemas/AstrologicalSignType'
                - type: object
                  properties:
                    alcohol_habits:
                      $ref: '#/components/schemas/AlcoholHabitsType'
                - type: object
                  properties:
                    smoking_habits:
                      $ref: '#/components/schemas/SmokingHabitsType'
                - type: object
                  properties:
                    kids_expectation:
                      $ref: '#/components/schemas/KidsExpectationType'
                - type: object
                  properties:
                    religion:
                      $ref: '#/components/schemas/ReligionType'
                - type: object
                  properties:
                    political_affiliation:
                      $ref: '#/components/schemas/PoliticalAffiliationType'
                - type: object
                  properties:
                    locale:
                      type: string
            example:
              firstname: "John"
              lastname: "Doe"
              height: 190
              email: "john.doe@gmail.com"
              date_of_birth: "2019-01-01"
              bio: "Hi every one"
              physical_activity: 1
              astrological_sign: 1
              alcohol_habits: 1
              smoking_habits: 1
              kids_expectation: 1
              religion: 1
              political_affiliation: 1
              locale: "fr"
      responses:
        '200':    # status code
          description: Return user
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/jobs:
    put:
      summary: Set and update user jobs
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Job'
      responses:
        '200':    # status code
          description: User's jobs updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/studies:
    put:
      summary: Set and update user studies
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/School'
      responses:
        '200':    # status code
          description: User studies updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/meta:
    post:
      summary: Get my meta data
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: My metadata
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/lairs:
    put:
      summary: Set and update user lairs
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Lair'
      responses:
        '200':    # status code
          description: Return user lairs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lair'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /profile/lairs/autocomplete/{query}:
    get:
      summary: Autocomplete lairs, query is cached
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: query
        schema:
          type: string
        required: true
        description: Query search
      responses:
        '200':    # status code
          description: Lairs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lair'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /live/messages:
    post:
      summary: Post a message during a live
      tags:
      - Live host
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Message content
              required:
              - message
      responses:
        '200':    # status code
          description: Message submitted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /live/questions/{id}:
    post:
      summary: Answer a live question
      tags:
      - Live host
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: integer
                  description: Answer id
              required:
              - answer
      responses:
        '200':    # status code
          description: Answer submitted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '410':
          description: Question expired
  /users/{id}/invite:
    post:
      summary: Send a macaroon to the user
      tags:
      - Macaroons
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the invited user
      responses:
        '200':    # status code
          description: User invited
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /users/{id}/skip:
    post:
      summary: Skip a user suggested
      tags:
      - Macaroons
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the invited user
      responses:
        '200':    # status code
          description: Suggestion skipped
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /invites/{id}:
    post:
      summary: Accept a macaroons
      tags:
      - Macaroons
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the invited user
      responses:
        '200':    # status code
          description: Invitation accepted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    delete:
      summary: Refuse a macaroons
      tags:
      - Macaroons
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the invited user
      responses:
        '200':    # status code
          description: Invitation refused
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /suggestions:
    get:
      summary: Get user suggestions
      tags:
      - Macaroons
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: User latest suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /conversations/{id}:
    get:
      summary: Get a conversation
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      responses:
        '200':    # status code
          description: Conversation's messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    post:
      summary: Send a message to a conversation
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Message content
              required:
              - message
      responses:
        '200':    # status code
          description: Message sent
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /conversations/{id}/games:
    get:
      summary: Get a shuffle game
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      responses:
        '200':    # status code
          description: A Shuffle game proposition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShuffleGame'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    post:
      summary: Post the proposed shuffle game
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      responses:
        '200':    # status code
          description: Shuffle game created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    delete:
      summary: Refuse the proposed shuffle game
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      responses:
        '200':    # status code
          description: Shuffle game refused
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /conversations/{id}/games/{gameId}:
    post:
      summary: Answer a game
      tags:
      - Messenger
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the conversation
      - in: path
        name: gameId
        schema:
          type: string
        required: true
        description: ID of the game
      responses:
        '200':    # status code
          description: Game answered
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /favorites:
    get:
      summary: Get user available favorites (profiles) organized in rounds
      tags:
      - Selections
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Profiles availables organized in round, and number of selection available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /favorites/{id}:
    post:
      summary: Post user final selection
      tags:
      - Selections
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the favorite user
      responses:
        '200':    # status code
          description: User and remaining favorite (for extra selection)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /reports/{id}:
    post:
      summary: Report a user
      tags:
      - Moderation
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cause:
                  type: string
                  description: Report cause
                text:
                  type: string
                  description: Extra info filled by the user
              required:
              - cause
      responses:
        '200':    # status code
          description: User reported
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    delete:
      summary: Un-report a user
      tags:
      - Moderation
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user
      responses:
        '200':    # status code
          description: User un-reported
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /blocks/{id}:
    post:
      summary: Block a user
      tags:
      - Moderation
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cause:
                  type: string
                  description: Block cause
                text:
                  type: string
                  description: Extra info filled by the user
              required:
              - cause
      responses:
        '200':    # status code
          description: User blocked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
    delete:
      summary: Un-block a user
      tags:
      - Moderation
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user
      responses:
        '200':    # status code
          description: User un-blocked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /spotify/authorize:
    post:
      summary: Link Spotify account
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Authorization code (https://developer.spotify.com/documentation/general/guides/authorization-guide/)
              required:
              - code
      responses:
        '200':    # status code
          description: Account linked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
        '503':
          description: Service unavailable
    delete:
      summary: Un-link Spotify account
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Account unlinked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /instagram/authorize:
    post:
      summary: Link Instagram account
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Authorization code (https://www.instagram.com/developer/authentication/)
              required:
              - code
      responses:
        '200':    # status code
          description: Account linked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
        '503':
          description: Service unavailable
    delete:
      summary: Un-link Instagram account
      tags:
      - My profile
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':    # status code
          description: Account unlinked
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
  /stats/events:
    post:
      summary: Post an event for stats purpose
      tags:
      - Stats
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: client-version
        required: true
        schema:
          $ref: '#/components/headers/ClientVersion'
      - in: header
        name: os-version
        required: true
        schema:
          $ref: '#/components/headers/OsVersion'
      responses:
        '200':
          description: TODO
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedAccess'
components:
  headers:
    ClientVersion:
      schema:
        type: integer
        description: Client version
    OsVersion:
      schema:
        type: string
        description: OS version
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    MissingParam:
      description: A parameter is missing
    NotFound:
      description: Resource not found
    BadRequest:
      description: Bad request
    UnauthorizedAccess:
      description: User cannot access this resource
    TooManyRequests:
      description: User sent too many requests
  schemas:
    PhoneRequest:
      type: object
      properties:
        phone:
          type: string
        phoneIndicative:
          type: integer
      required:
      - phone
      - phoneIndicative
      example:
        phone: 629490000
        phoneIndicative: 33
    Profile:
      description: User's profile
      type: object
      properties:
        id:
          type: string
        active:
          type: boolean
        firstname:
          type: string
        lastname:
          type: string
        created_at:
          type: integer
        last_updated_at:
          type: integer
        phone:
          type: integer
        phone_indicative:
          type: integer
        height:
          type: integer
        email:
          type: string
        date_of_birth:
          type: integer
        min_age:
          type: integer
        max_age:
          type: integer
        max_distance:
          type: integer
        bio:
          type: string
        country_code:
          type: string
        gender:
          type: integer
        physical_activity:
          type: integer
        astrological_sign:
          type: integer
        alcohol_habits:
          type: integer
        smoking_habits:
          type: integer
        kids_expectation:
          type: integer
        religion:
          type: integer
        political_affiliation:
          type: integer
        locale:
          $ref: '#/components/schemas/LocaleType'
        pictures:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Picture'
              - type: object
                properties:
                  isMain:
                    type: boolean
        jobs:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Job'
              - type: object
                properties:
                  isMain:
                    type: boolean
        studies:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/School'
              - type: object
                properties:
                  isMain:
                    type: boolean
        lairs:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              picture:
                $ref: '#/components/schemas/Picture'
              type:
                type: string
      example:
        id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
        active: true
        firstname: "John"
        lastname: "Doe"
        created_at: 1565337124
        last_updated_at: 1565337124
        phone: "629292929"
        phone_indicative: "33"
        height: 190
        email: "john.doe@triktrak.co"
        bio: "Hi I'm John, 22 years old from NY"
        date_of_birth: 1565337124
        min_age: 18
        max_age: 30
        max_distance: 100
        country_code: 12
        gender: 1
        physical_activity: 2
        astrological_sign: 1
        alcohol_habits: 1
        smoking_habits: 1
        kids_expectation: 1
        religion: 1
        political_affiliation: 1
        locale: "fr"
        pictures:
          - source: "http://images.triktrak.co/d0aads-sfea.jpg"
            name: "d0aads-sfea.jpg"
            isMain: true
            derivatives:
              - height: 40
                width: 40
                url: "http://images.triktrak.co/40x40_d0aads-sfea.jpg"
              - height: 80
                width: 80
                url: "http://images.triktrak.co/80x80_d0aads-sfea.jpg"
          - source: "http://images.triktrak.co/sdq00dsqsdq-ccxcaa.jpg"
            name: "sdq00dsqsdq-ccxcaa.jpg"
            isMain: false
            derivatives:
              - height: 40
                width: 40
                url: "http://images.triktrak.co/40x40_sdq00dsqsdq-ccxcaa.jpg"
              - height: 80
                width: 80
                url: "http://images.triktrak.co/80x80_sdq00dsqsdq-ccxcaa.jpg"
        jobs:
          - title: "Software engineer"
            company: "Trik Trak"
            start_date: 1565337124
            end_date: 1565337124
            isMain: true
          - title: "Software intern"
            company: "Criteo"
            start_date: 1565337124
            end_date: 1565337124
            isMain: false
        studies:
          - title: "Engineer"
            institution: "ENSAM"
            graduation_date: 1565337124
            isMain: true
        lairs:
          - id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
            name: "Burger King"
            picture: 
              source: "http://images.triktrak.co/sdq00dsqsdq-ccxcaa.jpg"
              name: "sdq00dsqsdq-ccxcaa.jpg"
              derivatives:
                - height: 40
                  width: 40
                  url: "http://images.triktrak.co/40x40_sdq00dsqsdq-ccxcaa.jpg"
                - height: 80
                  width: 80
                  url: "http://images.triktrak.co/80x80_sdq00dsqsdq-ccxcaa.jpg"
            type: 1
    User:
      description: A user
      type: object
      properties:
        id:
          type: string
        firstname:
          type: string
        height:
          type: integer
        distance:
          type: integer
        years_old:
          type: integer
        bio:
          type: string
        gender:
          type: integer
        physical_activity:
          type: integer
        astrological_sign:
          type: integer
        alcohol_habits:
          type: integer
        smoking_habits:
          type: integer
        kids_expectation:
          type: integer
        religion:
          type: integer
        political_affiliation:
          type: integer
        pictures:
          type: array
          items:
           allOf:
            - $ref: '#/components/schemas/Picture'
            - type: object
              properties:
                isMain:
                  type: boolean
        job:
          $ref: '#/components/schemas/Job'
        studies:
          $ref: '#/components/schemas/School'
        lairs:
          type: array
          items:
            $ref: '#/components/schemas/Lair'
      example:
        id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
        firstname: "John"
        height: 190
        age: 23
        distance: 2
        max_age: 30
        max_distance: 100
        bio: "Hi I'm John, 22 years old from NY"
        gender: 1
        physical_activity: 2
        astrological_sign: 1
        alcohol_habits: 1
        smoking_habits: 1
        kids_expectation: 1
        religion: 1
        political_affiliation: 1
        pictures:
          - source: "http://images.triktrak.co/d0aads-sfea.jpg"
            name: "d0aads-sfea.jpg"
            isMain: true
            derivatives:
              - height: 40
                width: 40
                url: "http://images.triktrak.co/40x40_d0aads-sfea.jpg"
              - height: 80
                width: 80
                url: "http://images.triktrak.co/80x80_d0aads-sfea.jpg"
          - source: "http://images.triktrak.co/sdq00dsqsdq-ccxcaa.jpg"
            name: "sdq00dsqsdq-ccxcaa.jpg"
            isMain: false
            derivatives:
              - height: 40
                width: 40
                url: "http://images.triktrak.co/40x40_sdq00dsqsdq-ccxcaa.jpg"
              - height: 80
                width: 80
                url: "http://images.triktrak.co/80x80_sdq00dsqsdq-ccxcaa.jpg"
        jobs:
          title: "Software engineer"
          company: "Trik Trak"
          start_date: 1565337124
          end_date: 1565337124
        studies:
          title: "Engineer"
          institution: "ENSAM"
          graduation_date: 1565337124
        lairs:
          - id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
            name: "Burger King"
            picture: 
              source: "http://images.triktrak.co/sdq00dsqsdq-ccxcaa.jpg"
              name: "sdq00dsqsdq-ccxcaa.jpg"
              derivatives:
                - height: 40
                  width: 40
                  url: "http://images.triktrak.co/40x40_sdq00dsqsdq-ccxcaa.jpg"
                - height: 80
                  width: 80
                  url: "http://images.triktrak.co/80x80_sdq00dsqsdq-ccxcaa.jpg"
            type: 1
    School:
      description: User's studies
      type: object
      properties:
        title:
          type: string
        institution:
          type: string
        graduation_date:
          type: integer
      example:
        title: "Engineer"
        institution: "ENSAM"
        graduation_date: 1565337124
    Job:
      description: User's job
      type: object
      properties:
        title:
          type: string
        company:
          type: string
        start_date:
          type: integer
        last_date:
          type: integer
      example:
        title: "Software engineer"
        company: "Trik Trak"
        start_date: 1565337124
        end_date: 1565337124
                
    Lair:
      description: User's lair
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        picture:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
    SessionStatus:
      description: Session status
      type: object
      properties:
        expectingPreviousSelection:
          description: "True if the user must do his previous selection"
          type: boolean
        inProgress:
          type: boolean
        start_date:
          type: integer
        end_date:
          type: integer
      example:
        expectingPreviousSelection: false
        inProgress: true
        start_date: 1565337124
        end_date: 1565337124
    Picture:
      description: An image resource
      type: object
      properties:
        source:
          type: string
        name:
          type: string
        derivatives:
          type: array
          items:
            type: object
            properties:
              height:
                type: integer
              width:
                type: integer
              url:
                type: string
      example:
        source: "http://images.triktrak.co/d0aads-sfea.jpg"
        name: "d0aads-sfea.jpg"
        derivatives:
            - height: 40
              width: 40
              url: "http://images.triktrak.co/40x40_d0aads-sfea.jpg"
            - height: 80
              width: 80
              url: "http://images.triktrak.co/80x80_d0aads-sfea.jpg"
    Announcement:
      description: Any form of announcement to the user (ex new favorite)
      type: object
      properties:
        type:
          type: string
        key:
          type: string
        content:
          type: string
        acknowledgementUrl:
          type: string
      example:
        type: 'new_favorite'
        key: ''
        content: Congrats you've won a new favorite for tonight show
        acknowledgementUrl: https://api.triktrak.co/announcements/339ed2e3-70cf-4a81-8db8-e95a9251155d
    Invite:
      description: An invite
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        sent_at:
          type: integer
      example:
        sent_at: 1565337124
        user:
          id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
          firstname: "John"
          height: 190
          age: 23
          distance: 2
          max_age: 30
          max_distance: 100
          bio: "Hi I'm John, 22 years old from NY"
          gender: 1
          physical_activity: 2
          astrological_sign: 1
          alcohol_habits: 1
          smoking_habits: 1
          kids_expectation: 1
          religion: 1
          political_affiliation: 1
          pictures:
            - source: "http://images.triktrak.co/d0aads-sfea.jpg"
              name: "d0aads-sfea.jpg"
              isMain: true
              derivatives:
                - height: 40
                  width: 40
                  url: "http://images.triktrak.co/40x40_d0aads-sfea.jpg"
                - height: 80
                  width: 80
                  url: "http://images.triktrak.co/80x80_d0aads-sfea.jpg"
          jobs:
            title: "Software engineer"
            company: "Trik Trak"
            start_date: 1565337124
            end_date: 1565337124
          studies:
            title: "Engineer"
            institution: "ENSAM"
            graduation_date: 1565337124
          lairs:
            - id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
              name: "Burger King"
              picture: 
                source: "http://images.triktrak.co/sdq00dsqsdq-ccxcaa.jpg"
                name: "sdq00dsqsdq-ccxcaa.jpg"
                derivatives:
                  - height: 40
                    width: 40
                    url: "http://images.triktrak.co/40x40_sdq00dsqsdq-ccxcaa.jpg"
                  - height: 80
                    width: 80
                    url: "http://images.triktrak.co/80x80_sdq00dsqsdq-ccxcaa.jpg"
              type: 1
    Expired:
      type: object
      properties:
        firstname:
          type: string
        date_of_invite:
          type: string
        picture:
          $ref: '#/components/schemas/Picture'
      example:
        firstname: 'Beatrice'
        date_of_invite: "2019-01-01T08:00:00.000Z"
        picture:
          source: "http://images.triktrak.co/d0aads-sfea.jpg"
          name: "d0aads-sfea.jpg"
          derivatives:
            - height: 40
              width: 40
              url: "http://images.triktrak.co/40x40_d0aads-sfea.jpg"
            - height: 80
              width: 80
              url: "http://images.triktrak.co/80x80_d0aads-sfea.jpg"
    Message:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        favorite:
          type: string
        timestamp:
          type: integer
        type:
          $ref: '#/components/schemas/MessageType'
        message:
          type: string
        from:
          type: string
        to:
          type: string
        attachment:
          type: string
        game:
          $ref: '#/components/schemas/ShuffleGame'
      example:
        id: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
        created_at: "2019-01-01T08:00:00.000Z"
        timestamp: 1565337124
        favorite: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
        type: 1
        message: "John sent you a macaroon"
        from: "339ed2e3-70cf-4a81-8db8-e95a9251155d"
        to: "e95a9251155d-8db8-70cf-4a81-339ed2e3"
    MessageType:
      type: integer
      enum: [1, 2, 3, 4]
      description: > 
        type: 
          * `1` - Notification
          * `2` - Text
          * `3` - Game
          * `4` - Attachment
    ShuffleGame:
      type: object
      properties:
        id:
          type: string
        created_at:
          type: string
        type:
          $ref: '#/components/schemas/ShuffleGameType'
        title:
          type: string
        isAnswered:
          type: boolean
        answer:
          type: string
      example:
        id: 339ed2e3-70cf-4a81-8db8-e95a9251155d
        created_at: 1565337124
        type: 1
        title: "Which food do you prefer?"
        isAnswer: true
        answer: "burger"
    Favorites:
      type: array
      items:
        $ref: '#/components/schemas/Round'
    Round:
      type: object
      properties:
        roundNumber:
          type: number
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ShuffleGameType:
      type: integer
      enum: [1, 2, 3, 4]
      description: > 
        type: 
          * `1` - Rating
          * `2` - Open question
          * `3` - 2-choices
          * `4` - n-choices
    Favorite:
      type: object
      properties:
        isTemporary:
          type: boolean
        user:
          $ref: '#/components/schemas/User'
        isRead:
          type: boolean
        nbOfUnread:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PhysicalActivityType:
      type: integer
      enum: [1, 2, 3]
      description: > 
        type: 
          * `1` - Active
          * `2` - Sometimes
          * `3` - Almost never
    AstrologicalSignType:
      type: integer
      enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      description: > 
        type: 
          * `1` - Aquarius
          * `2` - Pisces
          * `3` - Aries
          * `4` - Taurus
          * `5` - Gemini
          * `6` - Cancer
          * `7` - Leo
          * `8` - Virgo
          * `9` - Libra
          * `10` - Scorpio
          * `11` - Sagittarius
          * `12` - Capricorn
    AlcoholHabitsType:
      type: integer
      enum: [1, 2, 3]
      description: > 
        type: 
          * `1` - Socially
          * `2` - Never
          * `3` - Regularly
    SmokingHabitsType:
      type: integer
      enum: [1, 2, 3]
      description: > 
        type: 
          * `1` - Socially
          * `2` - Never
          * `3` - Regularly
    KidsExpectationType:
      type: integer
      enum: [1, 2, 3, 4]
      description: > 
        type: 
          * `1` - Want someday
          * `2` - Don't want
          * `3` - Have & want more
          * `4` - Have & don't want more
    ReligionType:
      type: integer
      enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
      description: > 
        type: 
          * `1` - Agnostic
          * `2` - Atheist
          * `3` - Buddhist
          * `4` - Christian
          * `5` - Hindu
          * `6` - Jain
          * `7` - Jewish
          * `8` - Muslim
          * `9` - Parsi
          * `10` - Sikh
          * `11` - Spiritual
          * `12` - Other
    PoliticalAffiliationType:
      type: integer
      enum: [1, 2, 3, 4]
      description: > 
        type: 
          * `1` - Apolitical
          * `2` - Moderate
          * `3` - Liberal
          * `4` - Conservative
    LocaleType:
      type: string
      enum: ["fr", "en"]
